package edu.uchicago.chakradhar.repos;


import com.mongodb.BasicDBObject;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters.*;
import com.mongodb.client.MongoCursor;
import edu.uchicago.chakradhar.models.Quote;
import io.quarkus.runtime.StartupEvent;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;

import static com.mongodb.client.model.Filters.eq;


@ApplicationScoped
public class QuoteMongodbRepo implements QuoteRepoInterface {
    @Inject
    MongoClient mongoClient;

    public final int PAGE_SIZE = 20;
    //id is auto-generated by mongodb
    public static final String QUOTE_COL = "quote";
    public static final String ANIME_COL = "anime";
    public static final String CHARACTER_COL = "character";
    public static final String EMAIL_COL = "userEmail";

    //this will get fired when the quarkus microservice starts
    void onStart(@Observes StartupEvent ev) {

        long collectionSize = getCollection().countDocuments();
        if (collectionSize > 0) return;
    }

    @Override
    public List<Quote> findAll() {

        List<Quote> list = new ArrayList<>();
        //this is the try-with-resources syntax from Java7
        try (MongoCursor<Document> cursor = getCollection().find().iterator()) {
            while (cursor.hasNext()) {
                Document document = cursor.next();
                Quote quote = new Quote();
                quote.setId(document.getObjectId("_id").toHexString());
                quote.setCharacter(document.getString(QUOTE_COL));
                quote.setAnime(document.getString(ANIME_COL));
                quote.setQuote(document.getString(CHARACTER_COL));
                quote.setUserEmail(document.getString(EMAIL_COL));

                list.add(quote);
            }
        }
        return list;
    }

    @Override
    public List<Quote> add(Quote quote) {
        Document document = new Document()
                .append(QUOTE_COL, quote.getCharacter())
                .append(ANIME_COL, quote.getAnime())
                .append(CHARACTER_COL, quote.getQuote())
                .append(EMAIL_COL, quote.getUserEmail());
        getCollection().insertOne(document);
        return findAll();
    }

    @Override
    public Quote get(String id) {

        BasicDBObject query = new BasicDBObject();
        query.put("_id", new ObjectId(id));

        FindIterable<Document> documents = getCollection().find(query);

        List<Quote> quotes = new ArrayList<>();
        for (Document document : documents) {
            quotes.add(transform(document));
        }

        //this will produce a 404 not found
        if (quotes.size() != 1) return null;

        return quotes.get(0);
    }

    @Override
    public List<Quote> getByEmail(String userEmail) {
        Bson emailQuery = eq(EMAIL_COL, userEmail);
//        BasicDBObject query = new BasicDBObject();
//        query.put(EMAIL_COL, new ObjectId(userEmail));
//
        FindIterable<Document> documents = getCollection().find(emailQuery);

        List<Quote> quotes = new ArrayList<>();
        for (Document document : documents) {
            quotes.add(transform(document));
        }

        //this will produce a 404 not found
        if (quotes.size() == 0) return null;
        return quotes;
    }

    @Override
    public List<Quote> paged(int pageNumber) {

        List<Quote> list = new ArrayList<>();
        try {
            MongoCursor<Document> cursor = getCollection().find().skip(PAGE_SIZE * (pageNumber - 1)).limit(PAGE_SIZE).iterator();
            while (cursor.hasNext()) {
                Document document = cursor.next();
                list.add(transform(document));
            }
            cursor.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public String delete(String id) {
        return getCollection().deleteOne(new Document("_id", new ObjectId(id))).toString();
    }

    @Override
    public String updateField(String id, Quote newQuote) {

        Document query = new Document();
        query.append("_id", "id");
        Document newData = new Document();
        newData.append(ANIME_COL, newQuote.getAnime())
                .append(QUOTE_COL, newQuote.getCharacter())
                .append(CHARACTER_COL, newQuote.getQuote())
                .append(EMAIL_COL,newQuote.getUserEmail());

        Document update = new Document();
        update.append("$set", newData);

        return getCollection().updateOne(new Document("_id", new ObjectId(id)), update).toString();

    }

    //for mongo
    private Quote transform(Document document) {
        Quote quote = new Quote();
        if (document != null && !document.isEmpty()) {

            quote.setId(document.getObjectId("_id").toHexString());
            quote.setCharacter(document.getString(QUOTE_COL));
            quote.setAnime(document.getString(ANIME_COL));
            quote.setQuote(document.getString(CHARACTER_COL));
            quote.setUserEmail(document.getString(EMAIL_COL));
        }
        return quote;
    }


    private MongoCollection getCollection() {
        return mongoClient.getDatabase("dogs_db").getCollection("dogs_collection");
    }
}
